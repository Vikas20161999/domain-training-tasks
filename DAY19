
https://tutorialworld.in/java-coding/java-coding-questions-if-else-statement/


https://www.programiz.com/java-programming/if-else-statement


package com.computationalalgorithms;
 
public class TowerOfHanoi {
  // Recursive function to solve the Tower of Hanoi puzzle
	public static void solveHanoi(int n, char fromRod, char toRod, char auxRod) {
    	if (n == 1) {
        	System.out.println("Move disk 1 from rod " + fromRod + " to rod " + toRod);
        	return;
    	}
 
    	// Move top n-1 disks from fromRod to auxRod using toRod
    	solveHanoi(n - 1, fromRod, auxRod, toRod);
 
    	// Move the nth disk from fromRod to toRod
    	System.out.println("Move disk " + n + " from rod " + fromRod + " to rod " + toRod);
 
    	// Move the n-1 disks from auxRod to toRod using fromRod
    	solveHanoi(n - 1, auxRod, toRod, fromRod);
	}
 
	public static void main(String[] args) {
    	int numberOfDisks = 3; // Number of disks
    	solveHanoi(numberOfDisks, 'A', 'C', 'B'); // A is the source rod, C is the destination rod, B is the auxiliary rod
	}
}
 


—----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



package com.computationalalgorithms;
 
public class TravelingSalesman {
   // Function to solve the TSP using Dynamic Programming
	public static int tsp(int[][] dist) {
    	int n = dist.length;
    	int VISITED_ALL = (1 << n) - 1;
    	int[][] dp = new int[1 << n][n];
 
    	// Initialize dp array with a large value
    	for (int i = 0; i < (1 << n); i++) {
        	for (int j = 0; j < n; j++) {
            	dp[i][j] = Integer.MAX_VALUE;
        	}
    	}
 
    	// Base case: starting from the first city
    	dp[1][0] = 0;
 
    	// Iterate over all subsets of cities
    	for (int mask = 1; mask < (1 << n); mask++) {
        	for (int i = 0; i < n; i++) {
            	// Continue if the ith city is not in the subset represented by mask
            	if ((mask & (1 << i)) == 0) continue;
 
            	// Try to find the minimum cost path to city i
            	for (int j = 0; j < n; j++) {
                	if ((mask & (1 << j)) != 0 && i != j) {
                    	dp[mask][i] = Math.min(dp[mask][i], dp[mask ^ (1 << i)][j] + dist[j][i]);
                	}
            	}
        	}
    	}
 
    	// Find the minimum cost to visit all cities and return to the starting city
    	int minCost = Integer.MAX_VALUE;
    	for (int i = 1; i < n; i++) {
        	minCost = Math.min(minCost, dp[VISITED_ALL][i] + dist[i][0]);
    	}
 
    	return minCost;
	}
 
	public static void main(String[] args) {
    	int[][] dist = {
        	{0, 10, 15, 20},
        	{10, 0, 35, 25},
        	{15, 35, 0, 30},
        	{20, 25, 30, 0}
    	};
 
    	System.out.println("The minimum cost is " + tsp(dist));
	}
}
 

Task 2: Traveling Salesman Problem
 Create a function int FindMinCost(int[,] graph)
 that takes a 2D array representing the graph where graph[i][j] is
 the cost to travel from city i to city j. The function should return
 the minimum cost to visit all cities and return to the starting city. 
 Use dynamic programming for this solution.

import java.util.Arrays;

public class TravelingSalesman {

    public int findMinCost(int[][] graph) {
        int n = graph.length;
        int VISITED_ALL = (1 << n) - 1;

        // dp[mask][i] stores the minimum cost to visit all cities in mask ending at city i
        int[][] dp = new int[1 << n][n];

        // Initialize dp array to a large value (representing infinity)
        for (int[] row : dp) {
            Arrays.fill(row, Integer.MAX_VALUE / 2); // Use Integer.MAX_VALUE / 2 to prevent overflow
        }

        // Starting point: starting at city 0 with only city 0 visited
        dp[1][0] = 0;

        // Iterate over all subsets of the set of cities
        for (int mask = 1; mask < (1 << n); mask++) {
            for (int u = 0; u < n; u++) {
                if ((mask & (1 << u)) != 0) {
                    // Current subset includes city u
                    for (int v = 0; v < n; v++) {
                        if ((mask & (1 << v)) == 0) {
                            // City v is not in the current subset
                            int nextMask = mask | (1 << v);
                            dp[nextMask][v] = Math.min(dp[nextMask][v], dp[mask][u] + graph[u][v]);
                        }
                    }
                }
            }
        }

        // Find the minimum cost to visit all cities and return to the starting city (0)
        int minCost = Integer.MAX_VALUE;
        for (int i = 1; i < n; i++) {
            minCost = Math.min(minCost, dp[VISITED_ALL][i] + graph[i][0]);
        }

        return minCost;
    }

    public static void main(String[] args) {
        // Example graph represented as a 2D array
        int[][] graph = {
            { 0, 29, 20, 21 },
            { 29, 0, 15, 17 },
            { 20, 15, 0, 28 },
            { 21, 17, 28, 0 }
        };

        TravelingSalesman tsp = new TravelingSalesman();
        int result = tsp.findMinCost(graph);
        System.out.println("The minimum cost is: " + result);
    }
}




has context menu



Task 1: Tower of Hanoi Solver


Create a program that solves the Tower of Hanoi puzzle for n disks.


The solution should use recursion to move disks between three


pegs (source, auxiliary, and destination) according to the game's rules.


The program should print out each move required to solve the puzzle.


public class TowerOfHanoi {

    // Recursive function to solve the Tower of Hanoi puzzle
    private static void solveHanoi(int n, char source, char auxiliary, char destination) {
        // Base case: If there's only one disk, move it from source to destination
        if (n == 1) {
            System.out.println("Move disk 1 from " + source + " to " + destination);
            return;
        }

        // Recursive case:
        // Step 1: Move the top n-1 disks from source to auxiliary, using destination as a temporary peg
        solveHanoi(n - 1, source, destination, auxiliary);

        // Step 2: Move the nth disk from source to destination
        System.out.println("Move disk " + n + " from " + source + " to " + destination);

        // Step 3: Move the n-1 disks from auxiliary to destination, using source as a temporary peg
        solveHanoi(n - 1, auxiliary, source, destination);
    }

    // Main method to initialize the puzzle and solve it
    public static void main(String[] args) {
        int numberOfDisks = 4; // Example: Solve for 4 disks
        char sourcePeg = 'A';
        char auxiliaryPeg = 'B';
        char destinationPeg = 'C';

        System.out.println("Tower of Hanoi solution for " + numberOfDisks + " disks:");
        solveHanoi(numberOfDisks, sourcePeg, auxiliaryPeg, destinationPeg);
    }
}

—------------------------------------------------------------------------------------------------------------------------------------------------------------

Task 3: Job Sequencing Problem
Define a class Job with properties int Id, int Deadline, and int Profit.
Then implement a function List<Job> JobSequencing(List<Job> jobs) that
takes a list of jobs and returns the maximum profit sequence of jobs 
that can be done before the deadlines. Use the greedy method to solve
this problem.

class Job {
    int id;
    int deadline;
    int profit;

    public Job(int id, int deadline, int profit) {
        this.id = id;
        this.deadline = deadline;
        this.profit = profit;
    }

    @Override
    public String toString() {
        return "Job{id=" + id + ", deadline=" + deadline + ", profit=" + profit + "}";
    }
}



—---------------------------------------------

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

public class JobSequencing {

    public static List<Job> jobSequencing(List<Job> jobs) {
        // Sort jobs in decreasing order of profit
        Collections.sort(jobs, new Comparator<Job>() {
            @Override
            public int compare(Job job1, Job job2) {
                return job2.profit - job1.profit;
            }
        });

        // Find the maximum deadline to determine the range of time slots
        int maxDeadline = 0;
        for (Job job : jobs) {
            if (job.deadline > maxDeadline) {
                maxDeadline = job.deadline;
            }
        }

        // Array to keep track of free time slots
        boolean[] timeSlots = new boolean[maxDeadline];
        // Array to store the result (sequence of jobs)
        Job[] result = new Job[maxDeadline];

        // Iterate through all the jobs
        for (Job job : jobs) {
            // Find a free time slot for this job (in reverse order to meet the deadline)
            for (int j = Math.min(maxDeadline - 1, job.deadline - 1); j >= 0; j--) {
                if (!timeSlots[j]) {
                    // Assign this job to the free slot and mark it as occupied
                    timeSlots[j] = true;
                    result[j] = job;
                    break;
                }
            }
        }

        // Collect all the scheduled jobs
        List<Job> scheduledJobs = new ArrayList<>();
        for (Job job : result) {
            if (job != null) {
                scheduledJobs.add(job);
            }
        }

        return scheduledJobs;
    }

    public static void main(String[] args) {
        List<Job> jobs = new ArrayList<>();
        jobs.add(new Job(1, 2, 100));
        jobs.add(new Job(2, 1, 19));
        jobs.add(new Job(3, 2, 27));
        jobs.add(new Job(4, 1, 25));
        jobs.add(new Job(5, 3, 15));

        List<Job> result = jobSequencing(jobs);

        System.out.println("Scheduled jobs for maximum profit:");
        for (Job job : result) {
            System.out.println(job);
        }
    }
}






