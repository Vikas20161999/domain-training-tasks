Solution Ans1: 

public class KnapsackProblem {
    public static void main(String[] args) {
        int W = 50;
        int[] weights = {10, 20, 30};
        int[] values = {60, 100, 120};
        System.out.println("Maximum value in Knapsack: " + Knapsack(W, weights, values));
    }

    public static int Knapsack(int W, int[] weights, int[] values) {
        int n = weights.length;
        
        // dp[i][w] will be the maximum value that can be achieved with the first i items and a weight limit of w
        int[][] dp = new int[n + 1][W + 1];

        // Build the dp array from bottom up
        for (int i = 1; i <= n; i++) {
            for (int w = 0; w <= W; w++) {
                if (weights[i - 1] <= w) {
                    dp[i][w] = Math.max(dp[i - 1][w], dp[i - 1][w - weights[i - 1]] + values[i - 1]);
                } else {
                    dp[i][w] = dp[i - 1][w];
                }
            }
        }

        // The maximum value is found in dp[n][W]
        return dp[n][W];
    }
}


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


Solution Ans2: 


public class LongestCommonSubsequence {
    public static void main(String[] args) {
        String text1 = "abcde";
        String text2 = "ace";
        System.out.println("Length of LCS: " + LCS(text1, text2));
    }

    public static int LCS(String text1, String text2) {
        int m = text1.length();
        int n = text2.length();
        
        // Create a 2D array to store lengths of LCS
        int[][] dp = new int[m + 1][n + 1];

        // Build the dp array from bottom up
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if (text1.charAt(i - 1) == text2.charAt(j - 1)) {
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                } else {
                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }

        // The length of LCS is in dp[m][n]
        return dp[m][n];
    }
}
