4. 

package com.javaio;
 
import java.io.File;
 
// To list all the files and directory of given directory
public class FileExample2 {
public static void main(String[] args) {
  File f=new File("E:\\MariaFolder");
  int count=0;
  String[] s=f.list();
  for(String s1:s) {
    count=count+1;
    System.out.println(s1);
  }
  System.out.println("Count of files "+count);
}
}

----------------------------------------------------------------------------------------

5.

package com.javaio;
 
import java.io.File;
 
public class FileExample3 {
  public static void main(String[] args) {
    int count=0;
    File f=new File("E:\\MariaFolder");
    
    String[] s=f.list();
    for(String s1:s) {
      File f1=new File(f,s1);
      if(f1.isDirectory()) {
        //if(f1.isFile()) {
          count++;
        System.out.println(s1);
        }
      
      
    }
    System.out.println(count);
  }
}


---------------------------------------------------------------------------------------------

6. count each word

import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class WordFrequencyCounter {
    public static void main(String[] args) {
        // Path to the input file
        String inputFilePath = "path/to/your/inputfile.txt";
        // Path to the output file
        String outputFilePath = "path/to/your/outputfile.txt";

        // HashMap to store word frequencies
        Map<String, Integer> wordCountMap = new HashMap<>();

        // Try-with-resources to automatically close the FileReader
        try (FileReader reader = new FileReader(inputFilePath)) {
            StringBuilder content = new StringBuilder();
            int character;

            // Read each character from the file and append to the StringBuilder
            while ((character = reader.read()) != -1) {
                content.append((char) character);
            }

            // Convert content to lowercase and split into words using non-word characters
            String[] words = content.toString().toLowerCase().split("\\W+");

            // Count each word
            for (String word : words) {
                if (!word.isEmpty()) {
                    // Increment the word count in the HashMap
                    wordCountMap.put(word, wordCountMap.getOrDefault(word, 0) + 1);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        // Try-with-resources to automatically close the FileWriter
        try (FileWriter writer = new FileWriter(outputFilePath)) {
            // Write the word frequencies to the output file
            for (Map.Entry<String, Integer> entry : wordCountMap.entrySet()) {
                writer.write(entry.getKey() + ": " + entry.getValue() + "\n");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}

-----------------------------------------------------------------------------------------------------------

7. serialization and deserialization

import java.io.*;

public class SerializeDeserializeExample {
    public static void main(String[] args) {
        // Create and serialize a Person object
        Person person = new Person("John Doe", 30);
        String filename = "person.ser";

        try (ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(filename))) {
            out.writeObject(person);
            System.out.println("Serialized data is saved in " + filename);
        } catch (IOException i) {
            i.printStackTrace();
        }

        // Deserialize the Person object
        try (ObjectInputStream in = new ObjectInputStream(new FileInputStream(filename))) {
            Person deserializedPerson = (Person) in.readObject();
            System.out.println("Deserialized Person: " + deserializedPerson);
        } catch (IOException | ClassNotFoundException i) {
            i.printStackTrace();
        }
    }
}

class Person implements Serializable {
    private static final long serialVersionUID = 1L; // Version control for the serialization process

    private String name;
    private int age;

    // Constructor
    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    // Getter methods
    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }

    @Override
    public String toString() {
        return "Person{name='" + name + "', age=" + age + "}";
    }
}

-------------------------------------------------------------------------------------------

8. New IO (NIO)

import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.FileChannel;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;

public class NIOFileCopy {
    public static void main(String[] args) {
        Path sourcePath = Paths.get("source.txt");
        Path destinationPath = Paths.get("destination.txt");

        // Try-with-resources to ensure the channels are closed automatically
        try (FileChannel sourceChannel = FileChannel.open(sourcePath, StandardOpenOption.READ);
             FileChannel destinationChannel = FileChannel.open(destinationPath, StandardOpenOption.WRITE, StandardOpenOption.CREATE)) {

            // Allocate a buffer
            ByteBuffer buffer = ByteBuffer.allocate(1024);

            // Read data from source file and write it to destination file
            while (sourceChannel.read(buffer) > 0) {
                // Flip the buffer from writing mode to reading mode
                buffer.flip();
                
                // Write the buffer content to the destination file
                destinationChannel.write(buffer);
                
                // Clear the buffer for the next read operation
                buffer.clear();
            }
            
            System.out.println("File copied successfully!");

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}

----------------------------------------------------------------------------------------

9. Java Networking

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.List;
import java.util.Map;

public class SimpleHttpClient {
    public static void main(String[] args) {
        String urlString = "http://www.example.com"; // Replace with your desired URL

        try {
            // Create URL object
            URL url = new URL(urlString);

            // Open a connection to the URL
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();

            // Set the request method to GET
            connection.setRequestMethod("GET");

            // Connect to the server
            connection.connect();

            // Get and print the response headers
            Map<String, List<String>> headers = connection.getHeaderFields();
            System.out.println("Response Headers:");
            for (Map.Entry<String, List<String>> header : headers.entrySet()) {
                System.out.println(header.getKey() + ": " + header.getValue());
            }

            // Get the response code
            int responseCode = connection.getResponseCode();
            System.out.println("Response Code: " + responseCode);

            // Read and print the response body
            BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            String inputLine;
            StringBuilder responseBody = new StringBuilder();

            while ((inputLine = in.readLine()) != null) {
                responseBody.append(inputLine).append("\n");
            }
            in.close();

            System.out.println("Response Body:");
            System.out.println(responseBody.toString());

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}


----------------------------------------------------------------------------------------------

10. Java Networking and Serialization


Serializable Object

import java.io.Serializable;

public class OperationRequest implements Serializable {
    private static final long serialVersionUID = 1L;
    
    private double number1;
    private double number2;
    private String operation;

    public OperationRequest(double number1, double number2, String operation) {
        this.number1 = number1;
        this.number2 = number2;
        this.operation = operation;
    }

    public double getNumber1() {
        return number1;
    }

    public double getNumber2() {
        return number2;
    }

    public String getOperation() {
        return operation;
    }
}


-----In the same Program 

Server Code

import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;

public class TCPServer {
    public static void main(String[] args) {
        int port = 12345; // Port number for the server to listen on

        try (ServerSocket serverSocket = new ServerSocket(port)) {
            System.out.println("Server is listening on port " + port);

            while (true) {
                try (Socket socket = serverSocket.accept();
                     ObjectInputStream objectInputStream = new ObjectInputStream(socket.getInputStream());
                     ObjectOutputStream objectOutputStream = new ObjectOutputStream(socket.getOutputStream())) {

                    // Read the operation request object from the client
                    OperationRequest request = (OperationRequest) objectInputStream.readObject();

                    // Perform the operation
                    double result = performOperation(request.getNumber1(), request.getNumber2(), request.getOperation());

                    // Send the result back to the client
                    objectOutputStream.writeObject(result);
                } catch (ClassNotFoundException e) {
                    e.printStackTrace();
                }
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static double performOperation(double number1, double number2, String operation) {
        switch (operation) {
            case "+":
                return number1 + number2;
            case "-":
                return number1 - number2;
            case "*":
                return number1 * number2;
            case "/":
                if (number2 != 0) {
                    return number1 / number2;
                } else {
                    throw new ArithmeticException("Division by zero");
                }
            default:
                throw new IllegalArgumentException("Invalid operation: " + operation);
        }
    }
}


-----In the same program 

Client Code

import java.io.*;
import java.net.Socket;

public class TCPClient {
    public static void main(String[] args) {
        String hostname = "localhost";
        int port = 12345; // Port number the server is listening on

        try (Socket socket = new Socket(hostname, port);
             ObjectOutputStream objectOutputStream = new ObjectOutputStream(socket.getOutputStream());
             ObjectInputStream objectInputStream = new ObjectInputStream(socket.getInputStream())) {

            // Create an OperationRequest object
            OperationRequest request = new OperationRequest(2, 2, "+");

            // Send the request to the server
            objectOutputStream.writeObject(request);

            // Read the result from the server
            double result = (double) objectInputStream.readObject();

            System.out.println("Result: " + result);

        } catch (IOException | ClassNotFoundException e) {
            e.printStackTrace();
        }
    }
}





