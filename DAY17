1.Implementing the KMP Algorithm
 Code the Knuth-Morris-Pratt (KMP) algorithm in Java for pattern searching which pre-processes the pattern to reduce the number of comparisons. Explain how this pre-processing improves the search time compared to the naive approach.


public class KMP {
    public static void main(String[] args) {
        String text = "ABABDABACDABABCABAB";
        String pattern = "ABABCABAB";
        int[] lps = computeLPSArray(pattern);
        search(text, pattern, lps);
    }

    public static int[] computeLPSArray(String pattern) {
        int[] lps = new int[pattern.length()];
        int j = 0;
        for (int i = 1; i < pattern.length(); ) {
            if (pattern.charAt(i) == pattern.charAt(j)) {
                lps[i] = j + 1;
                i++;
                j++;
            } else {
                if (j != 0) {
                    j = lps[j - 1];
                } else {
                    lps[i] = 0;
                    i++;
                }
            }
        }
        return lps;
    }

    public static void search(String text, String pattern, int[] lps) {
        int i = 0, j = 0;
        while (i < text.length()) {
            if (text.charAt(i) == pattern.charAt(j)) {
                i++;
                j++;
            }
            if (j == pattern.length()) {
                System.out.println("Pattern found at index " + (i - j));
                j = lps[j - 1];
            } else if (i < text.length() && text.charAt(i) != pattern.charAt(j)) {
                if (j != 0) {
                    j = lps[j - 1];
                } else {
                    i++;
                }
            }
        }
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------

2.   Implement the Rabin-Karp algorithm for substring search using a rolling hash. Discuss the impact of hash collisions on the algorithm's performance and how to handle them.


import java.util.ArrayList;
import java.util.List;

public class RabinKarp {
    private static final int PRIME = 101; // Prime number for hashing

    public static List<Integer> search(String text, String pattern) {
        List<Integer> indices = new ArrayList<>();
        int n = text.length();
        int m = pattern.length();
        int patternHash = hash(pattern, m);
        int textHash = hash(text.substring(0, m), m);

        for (int i = 0; i <= n - m; i++) {
            if (patternHash == textHash && isEqual(text, i, pattern, 0, m - 1)) {
                indices.add(i);
            }
            if (i < n - m) {
                textHash = recalculateHash(text, i, i + m, textHash, m);
            }
        }
        return indices;
    }

    private static int hash(String str, int len) {
        int hashValue = 0;
        for (int i = 0; i < len; i++) {
            hashValue += str.charAt(i) * Math.pow(PRIME, i);
        }
        return hashValue;
    }

    private static int recalculateHash(String str, int oldIndex, int newIndex, int oldHash, int len) {
        int newHash = oldHash - str.charAt(oldIndex);
        newHash = newHash / PRIME;
        newHash += str.charAt(newIndex) * Math.pow(PRIME, len - 1);
        return newHash;
    }

    private static boolean isEqual(String text, int start1, String pattern, int start2, int end) {
        for (int i = start1, j = start2; i <= end; i++, j++) {
            if (text.charAt(i) != pattern.charAt(j)) {
                return false;
            }
        }
        return true;
    }

    public static void main(String[] args) {
        String text = "AABAACAADAABAABA";
        String pattern = "AABA";
        List<Integer> indices = search(text, pattern);
        if (!indices.isEmpty()) {
            System.out.println("Pattern found at indices: " + indices);
        } else {
            System.out.println("Pattern not found in the text.");
        }
    }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

3.  Use the Boyer-Moore algorithm to write a function that finds the last occurrence of a substring in a given string and returns its index. Explain why this algorithm can outperform others in certain scenarios.


import java.util.Arrays;

public class BoyerMoore {
    private static final int ASCII_SIZE = 256;

    public static int lastOccurrence(String text, String pattern) {
        int n = text.length();
        int m = pattern.length();
        int[] badCharacter = badCharacterHeuristic(pattern);
        int[] suffix = goodSuffixHeuristic(pattern);

        int i = m - 1; // index for the text
        int j = m - 1; // index for the pattern

        while (i < n) {
            if (text.charAt(i) == pattern.charAt(j)) {
                if (j == 0) {
                    return i;
                }
                i--;
                j--;
            } else {
                i = i + m - Math.min(j, 1 + badCharacter[text.charAt(i)]);
                j = m - 1;
            }
        }
        return -1; // pattern not found
    }

    private static int[] badCharacterHeuristic(String pattern) {
        int m = pattern.length();
        int[] badCharacter = new int[ASCII_SIZE];
        Arrays.fill(badCharacter, -1);
        for (int i = 0; i < m; i++) {
            badCharacter[pattern.charAt(i)] = i;
        }
        return badCharacter;
    }

    private static int[] goodSuffixHeuristic(String pattern) {
        int m = pattern.length();
        int[] suffix = new int[m];
        Arrays.fill(suffix, -1);
        for (int i = m - 2; i >= 0; i--) {
            int j = i;
            while (j >= 0 && pattern.charAt(j) == pattern.charAt(m - 1 - (i - j))) {
                j--;
            }
            suffix[i] = i - j;
        }
        return suffix;
    }

    public static void main(String[] args) {
        String text = "abcbabcbacbab";
        String pattern = "bca";
        int lastIndex = lastOccurrence(text, pattern);
        if (lastIndex != -1) {
            System.out.println("Last occurrence found at index: " + lastIndex);
        } else {
            System.out.println("Pattern not found in the text.");
        }
    }
}
