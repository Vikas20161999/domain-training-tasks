1.

class Pair<T, U> {
    private T first;
    private U second;

    public Pair(T first, U second) {
        this.first = first;
        this.second = second;
    }

    public T getFirst() {
        return first;
    }

    public U getSecond() {
        return second;
    }

    public Pair<U, T> reverse() {
        return new Pair<>(second, first);
    }

    @Override
    public String toString() {
        return "Pair{" +
                "first=" + first +
                ", second=" + second +
                '}';
    }

    public static void main(String[] args) {
        Pair<String, Integer> pair = new Pair<>("Hello", 42);
        System.out.println("Original Pair: " + pair);
        Pair<Integer, String> reversedPair = pair.reverse();
        System.out.println("Reversed Pair: " + reversedPair);
    }
}

---------------------------------------------------------------------------------------------------------

2. 

import java.util.Arrays;

public class GenericSwap {

    public static <T> void swap(T[] array, int index1, int index2) {
        T temp = array[index1];
        array[index1] = array[index2];
        array[index2] = temp;
    }

    public static void main(String[] args) {
        // Swapping elements in an Integer array
        Integer[] intArray = {1, 2, 3, 4, 5};
        System.out.println("Original Integer Array: " + Arrays.toString(intArray));
        swap(intArray, 1, 3);
        System.out.println("Swapped Integer Array: " + Arrays.toString(intArray));

        // Swapping elements in a String array
        String[] strArray = {"A", "B", "C", "D", "E"};
        System.out.println("Original String Array: " + Arrays.toString(strArray));
        swap(strArray, 0, 4);
        System.out.println("Swapped String Array: " + Arrays.toString(strArray));
    }
}


----------------------------------------------------------------------------------------------------------------

3. Reflection API

import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;

public class ReflectionExample {

    public static void main(String[] args) {
        try {
            // Define a SampleClass for demonstration
            Class<?> sampleClass = SampleClass.class;

            // Inspecting constructors
            Constructor<?>[] constructors = sampleClass.getDeclaredConstructors();
            System.out.println("Constructors:");
            for (Constructor<?> constructor : constructors) {
                System.out.println(constructor);
            }

            // Inspecting methods
            Method[] methods = sampleClass.getDeclaredMethods();
            System.out.println("Methods:");
            for (Method method : methods) {
                System.out.println(method);
            }

            // Inspecting fields
            Field[] fields = sampleClass.getDeclaredFields();
            System.out.println("Fields:");
            for (Field field : fields) {
                System.out.println(field);
            }

            // Modify the access level of the private field and set its value
            Field privateField = sampleClass.getDeclaredField("privateField");
            privateField.setAccessible(true); // Bypass the private access modifier

            // Create an instance of SampleClass
            SampleClass instance = new SampleClass();

            // Set the value of the private field
            privateField.set(instance, "Modified Value");

            // Get the value of the private field to verify it was changed
            String fieldValue = (String) privateField.get(instance);
            System.out.println("Modified privateField value: " + fieldValue);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

// SampleClass definition
class SampleClass {
    private String privateField = "Initial Value";

    public SampleClass() {
    }

    private void privateMethod() {
        System.out.println("Private Method Called");
    }

    public void publicMethod() {
        System.out.println("Public Method Called");
    }
}


-----------------------------------------------------------------------------------------------------------------

4.Lambda Expressions

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

class Person {
    private String name;
    private int age;

    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    public int getAge() {
        return age;
    }

    public String toString() {
        return name + ": " + age;
    }
}

public class LambdaComparator {
    public static void main(String[] args) {
        List<Person> people = new ArrayList<>();
        people.add(new Person("Alice", 30));
        people.add(new Person("Bob", 25));
        people.add(new Person("Charlie", 35));

        // Sorting using lambda expression
        Collections.sort(people, (p1, p2) -> Integer.compare(p1.getAge(), p2.getAge()));

        // Print sorted list
        people.forEach(System.out::println);
    }
}


------------------------------------------------------------------------------------------------------------------

5. Functional Interfaces

import java.util.function.Predicate;
import java.util.function.Function;
import java.util.function.Consumer;
import java.util.function.Supplier;

class Person {
    private String name;
    private int age;

    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    public int getAge() {
        return age;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    @Override
    public String toString() {
        return "Person{name='" + name + "', age=" + age + "}";
    }
}

public class FunctionalInterfacesDemo {

    public static void main(String[] args) {
        Person person = new Person("John Doe", 20);

        // Predicate: Test if person's age is over 18
        Predicate<Person> isAdult = p -> p.getAge() > 18;
        System.out.println("Is adult: " + isAdult.test(person));

        // Function: Get the person's name
        Function<Person, String> getName = Person::getName;
        System.out.println("Name: " + getName.apply(person));

        // Consumer: Print the person's details
        Consumer<Person> printPerson = p -> System.out.println("Person: " + p);
        printPerson.accept(person);

        // Supplier: Provide a new person
        Supplier<Person> personSupplier = () -> new Person("Jane Doe", 22);
        System.out.println("New person: " + personSupplier.get());
    }
}

