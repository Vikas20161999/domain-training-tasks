1. Number Printing Thread

public class NumberPrintingThreads {
    public static void main(String[] args) {
        Runnable printNumbers = () -> {
            for (int i = 1; i <= 10; i++) {
                System.out.println(Thread.currentThread().getName() + ": " + i);
                try {
                    Thread.sleep(1000); // 1-second delay
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                    e.printStackTrace();
                }
            }
        };

        Thread thread1 = new Thread(printNumbers, "Thread 1");
        Thread thread2 = new Thread(printNumbers, "Thread 2");

        thread1.start();
        thread2.start();
    }
}

----------------------------------------------------------------------------------------------------
2. states and transitions

public class ThreadLifecycleDemo {

    private static final Object lock = new Object();

    public static void main(String[] args) {
        Thread thread = new Thread(new LifecycleRunnable());

        // NEW state
        System.out.println("Thread state after creation: " + thread.getState());

        thread.start();
        // RUNNABLE state
        System.out.println("Thread state after calling start(): " + thread.getState());

        try {
            // Ensure the thread starts and hits the synchronized block
            Thread.sleep(100);

            synchronized (lock) {
                // Making sure the thread goes into WAITING state
                lock.notify();
            }

            // Waiting for the thread to complete execution
            thread.join();
            // TERMINATED state
            System.out.println("Thread state after completion: " + thread.getState());
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    static class LifecycleRunnable implements Runnable {
        @Override
        public void run() {
            synchronized (lock) {
                try {
                    // WAITING state
                    System.out.println("Thread state before waiting: " + Thread.currentThread().getState());
                    lock.wait();
                    System.out.println("Thread state after being notified: " + Thread.currentThread().getState());
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }

            try {
                // TIMED_WAITING state
                System.out.println("Thread state before sleep: " + Thread.currentThread().getState());
                Thread.sleep(500);
                System.out.println("Thread state after sleep: " + Thread.currentThread().getState());
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            synchronized (lock) {
                // Just to demonstrate BLOCKED state
                System.out.println("Thread state inside synchronized block: " + Thread.currentThread().getState());
            }
        }
    }
}

-----------------------------------------------------------------------------------------------------

3.Synchronization and Inter-thread Communication

import java.util.LinkedList;
import java.util.Queue;

public class ProducerConsumerDemo {
    public static void main(String[] args) {
        Buffer buffer = new Buffer(5);

        Thread producerThread = new Thread(new Producer(buffer));
        Thread consumerThread = new Thread(new Consumer(buffer));

        producerThread.start();
        consumerThread.start();
    }
}

class Buffer {
    private final Queue<Integer> queue;
    private final int capacity;

    public Buffer(int capacity) {
        this.queue = new LinkedList<>();
        this.capacity = capacity;
    }

    public synchronized void produce(int value) throws InterruptedException {
        while (queue.size() == capacity) {
            wait();
        }
        queue.add(value);
        System.out.println("Produced: " + value);
        notifyAll();
    }

    public synchronized int consume() throws InterruptedException {
        while (queue.isEmpty()) {
            wait();
        }
        int value = queue.poll();
        System.out.println("Consumed: " + value);
        notifyAll();
        return value;
    }
}

class Producer implements Runnable {
    private final Buffer buffer;

    public Producer(Buffer buffer) {
        this.buffer = buffer;
    }

    @Override
    public void run() {
        int value = 0;
        try {
            while (true) {
                buffer.produce(value++);
                Thread.sleep(100); // Simulate time taken to produce an item
            }
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }
}

class Consumer implements Runnable {
    private final Buffer buffer;

    public Consumer(Buffer buffer) {
        this.buffer = buffer;
    }

    @Override
    public void run() {
        try {
            while (true) {
                buffer.consume();
                Thread.sleep(150); // Simulate time taken to consume an item
            }
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }
}



-----------------------------------------------------------------------------------------------------------
4.Synchronized Blocks and Methods

public class BankAccountDemo {
    public static void main(String[] args) {
        BankAccount account = new BankAccount(1000); // Initial balance of 1000

        Thread depositThread1 = new Thread(new DepositTask(account, 200));
        Thread depositThread2 = new Thread(new DepositTask(account, 300));
        Thread withdrawThread1 = new Thread(new WithdrawTask(account, 150));
        Thread withdrawThread2 = new Thread(new WithdrawTask(account, 500));

        depositThread1.start();
        depositThread2.start();
        withdrawThread1.start();
        withdrawThread2.start();
    }
}

class BankAccount {
    private double balance;

    public BankAccount(double balance) {
        this.balance = balance;
    }

    public synchronized void deposit(double amount) {
        balance += amount;
        System.out.println(Thread.currentThread().getName() + " deposited " + amount + ", new balance: " + balance);
    }

    public synchronized void withdraw(double amount) {
        if (amount <= balance) {
            balance -= amount;
            System.out.println(Thread.currentThread().getName() + " withdrew " + amount + ", new balance: " + balance);
        } else {
            System.out.println(Thread.currentThread().getName() + " tried to withdraw " + amount + ", but insufficient balance: " + balance);
        }
    }

    public synchronized double getBalance() {
        return balance;
    }
}

class DepositTask implements Runnable {
    private final BankAccount account;
    private final double amount;

    public DepositTask(BankAccount account, double amount) {
        this.account = account;
        this.amount = amount;
    }

    @Override
    public void run() {
        account.deposit(amount);
    }
}

class WithdrawTask implements Runnable {
    private final BankAccount account;
    private final double amount;

    public WithdrawTask(BankAccount account, double amount) {
        this.account = account;
        this.amount = amount;
    }

    @Override
    public void run() {
        account.withdraw(amount);
    }
}

-------------------------------------------------------------------------------------------------------------
5.Thread Pools and Concurrency Utilities

 Create a fixed-size thread pool and submit multiple tasks that perform complex calculations or I/O operations and observe the execution.

---------------------------------------------------------------------------------------------------------------
6.Executors, Concurrent Collections, CompletableFuture
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

public class PrimeNumberCalculator {

    public static void main(String[] args) {
        int upperLimit = 100000; // Calculate prime numbers up to this limit
        int numberOfThreads = 4; // Number of threads in the pool

        // Create a fixed-size thread pool
        ExecutorService executorService = Executors.newFixedThreadPool(numberOfThreads);

        // Split the task of finding prime numbers into several tasks
        List<CompletableFuture<List<Integer>>> futures = new ArrayList<>();
        int range = upperLimit / numberOfThreads;
        for (int i = 0; i < numberOfThreads; i++) {
            int start = i * range + 1;
            int end = (i + 1) * range;
            CompletableFuture<List<Integer>> future = CompletableFuture.supplyAsync(() -> findPrimesInRange(start, end), executorService);
            futures.add(future);
        }

        // Combine the results from all tasks
        CompletableFuture<Void> allOf = CompletableFuture.allOf(futures.toArray(new CompletableFuture[0]));
        CompletableFuture<List<Integer>> allPrimes = allOf.thenApply(v -> {
            List<Integer> primes = new ArrayList<>();
            futures.forEach(future -> primes.addAll(future.join()));
            return primes;
        });

        // Write the results to a file asynchronously
        allPrimes.thenAcceptAsync(primes -> writePrimesToFile(primes, "primes.txt"), executorService)
                 .thenRun(() -> System.out.println("Prime numbers have been written to primes.txt"))
                 .exceptionally(ex -> {
                     ex.printStackTrace();
                     return null;
                 });

        // Shutdown the executor service
        executorService.shutdown();
        try {
            if (!executorService.awaitTermination(60, TimeUnit.SECONDS)) {
                executorService.shutdownNow();
            }
        } catch (InterruptedException e) {
            executorService.shutdownNow();
        }
    }

    private static List<Integer> findPrimesInRange(int start, int end) {
        List<Integer> primes = new ArrayList<>();
        for (int i = start; i <= end; i++) {
            if (isPrime(i)) {
                primes.add(i);
            }
        }
        return primes;
    }

    private static boolean isPrime(int number) {
        if (number <= 1) return false;
        if (number == 2 || number == 3) return true;
        if (number % 2 == 0 || number % 3 == 0) return false;
        for (int i = 5; i * i <= number; i += 6) {
            if (number % i == 0 || number % (i + 2) == 0) return false;
        }
        return true;
    }

    private static void writePrimesToFile(List<Integer> primes, String filename) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filename))) {
            for (int prime : primes) {
                writer.write(prime + System.lineSeparator());
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}

--------------------------------------------------------------------------------------------------------------------
7.Writing Thread-Safe Code, Immutable Objects

public class CounterDemo {
    public static void main(String[] args) {
        Counter counter = new Counter();

        // Create multiple threads to increment and decrement the counter
        Thread incrementThread1 = new Thread(new IncrementTask(counter));
        Thread incrementThread2 = new Thread(new IncrementTask(counter));
        Thread decrementThread1 = new Thread(new DecrementTask(counter));
        Thread decrementThread2 = new Thread(new DecrementTask(counter));

        // Start the threads
        incrementThread1.start();
        incrementThread2.start();
        decrementThread1.start();
        decrementThread2.start();

        try {
            // Wait for all threads to finish
            incrementThread1.join();
            incrementThread2.join();
            decrementThread1.join();
            decrementThread2.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        // Print the final counter value
        System.out.println("Final counter value: " + counter.getValue());

        // Demonstrate usage of immutable class
        SharedData sharedData = new SharedData(42);
        System.out.println("Shared data value: " + sharedData.getValue());
    }
}

class Counter {
    private int value = 0;

    public synchronized void increment() {
        value++;
        System.out.println(Thread.currentThread().getName() + " incremented to " + value);
    }

    public synchronized void decrement() {
        value--;
        System.out.println(Thread.currentThread().getName() + " decremented to " + value);
    }

    public synchronized int getValue() {
        return value;
    }
}

class IncrementTask implements Runnable {
    private final Counter counter;

    public IncrementTask(Counter counter) {
        this.counter = counter;
    }

    @Override
    public void run() {
        for (int i = 0; i < 10; i++) {
            counter.increment();
            try {
                Thread.sleep(50); // Simulate some work
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        }
    }
}

class DecrementTask implements Runnable {
    private final Counter counter;

    public DecrementTask(Counter counter) {
        this.counter = counter;
    }

    @Override
    public void run() {
        for (int i = 0; i < 10; i++) {
            counter.decrement();
            try {
                Thread.sleep(50); // Simulate some work
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        }
    }
}

// Immutable class to share data between threads
final class SharedData {
    private final int value;

    public SharedData(int value) {
        this.value = value;
    }

    public int getValue() {
        return value;
    }
}


