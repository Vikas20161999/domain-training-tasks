1. Number Printing Thread

public class NumberPrintingThreads {
    public static void main(String[] args) {
        Runnable printNumbers = () -> {
            for (int i = 1; i <= 10; i++) {
                System.out.println(Thread.currentThread().getName() + ": " + i);
                try {
                    Thread.sleep(1000); // 1-second delay
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                    e.printStackTrace();
                }
            }
        };

        Thread thread1 = new Thread(printNumbers, "Thread 1");
        Thread thread2 = new Thread(printNumbers, "Thread 2");

        thread1.start();
        thread2.start();
    }
}

----------------------------------------------------------------------------------------------------
2. states and transitions

public class ThreadLifecycleDemo {

    private static final Object lock = new Object();

    public static void main(String[] args) {
        Thread thread = new Thread(new LifecycleRunnable());

        // NEW state
        System.out.println("Thread state after creation: " + thread.getState());

        thread.start();
        // RUNNABLE state
        System.out.println("Thread state after calling start(): " + thread.getState());

        try {
            // Ensure the thread starts and hits the synchronized block
            Thread.sleep(100);

            synchronized (lock) {
                // Making sure the thread goes into WAITING state
                lock.notify();
            }

            // Waiting for the thread to complete execution
            thread.join();
            // TERMINATED state
            System.out.println("Thread state after completion: " + thread.getState());
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    static class LifecycleRunnable implements Runnable {
        @Override
        public void run() {
            synchronized (lock) {
                try {
                    // WAITING state
                    System.out.println("Thread state before waiting: " + Thread.currentThread().getState());
                    lock.wait();
                    System.out.println("Thread state after being notified: " + Thread.currentThread().getState());
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }

            try {
                // TIMED_WAITING state
                System.out.println("Thread state before sleep: " + Thread.currentThread().getState());
                Thread.sleep(500);
                System.out.println("Thread state after sleep: " + Thread.currentThread().getState());
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            synchronized (lock) {
                // Just to demonstrate BLOCKED state
                System.out.println("Thread state inside synchronized block: " + Thread.currentThread().getState());
            }
        }
    }
}

-----------------------------------------------------------------------------------------------------

3.Synchronization and Inter-thread Communication

import java.util.LinkedList;
import java.util.Queue;

class ProducerConsumer {
    private static final int CAPACITY = 5;
    private final Queue<Integer> queue = new LinkedList<>();

    public static void main(String[] args) {
        ProducerConsumer pc = new ProducerConsumer();
        Thread producerThread = new Thread(pc::produce);
        Thread consumerThread = new Thread(pc::consume);

        producerThread.start();
        consumerThread.start();
    }

    public void produce() {
        int value = 0;
        while (true) {
            synchronized (this) {
                while (queue.size() == CAPACITY) {
                    try {
                        wait();
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
                queue.offer(value++);
                System.out.println("Produced " + value);
                notify();
            }
        }
    }

    public void consume() {
        while (true) {
            synchronized (this) {
                while (queue.isEmpty()) {
                    try {
                        wait();
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
                int value = queue.poll();
                System.out.println("Consumed " + value);
                notify();
            }
        }
    }
}


-----------------------------------------------------------------------------------------------------------
4.Synchronized Blocks and Methods

class BankAccount {
    private int balance = 1000;

    public static void main(String[] args) {
        BankAccount account = new BankAccount();
        Thread t1 = new Thread(() -> account.deposit(200));
        Thread t2 = new Thread(() -> account.withdraw(150));
        Thread t3 = new Thread(() -> account.withdraw(50));

        t1.start();
        t2.start();
        t3.start();
    }

    public synchronized void deposit(int amount) {
        balance += amount;
        System.out.println("Deposited " + amount + ", Balance: " + balance);
    }

    public synchronized void withdraw(int amount) {
        if (balance >= amount) {
            balance -= amount;
            System.out.println("Withdrew " + amount + ", Balance: " + balance);
        } else {
            System.out.println("Insufficient balance to withdraw " + amount);
        }
    }
}

-------------------------------------------------------------------------------------------------------------
5.Thread Pools and Concurrency Utilities

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

class ThreadPoolDemo {

    public static void main(String[] args) {
        ExecutorService executor = Executors.newFixedThreadPool(3);

        for (int i = 0; i < 10; i++) {
            executor.submit(() -> {
                try {
                    Thread.sleep(500);
                    System.out.println("Task executed by " + Thread.currentThread().getName());
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                }
            });
        }
        executor.shutdown();
    }
}

---------------------------------------------------------------------------------------------------------------
6.Executors, Concurrent Collections, CompletableFuture

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

class PrimeCalculator {

    public static void main(String[] args) {
        ExecutorService executor = Executors.newFixedThreadPool(4);

        CompletableFuture.supplyAsync(() -> calculatePrimes(10000), executor)
                .thenAcceptAsync(primes -> {
                    try {
                        Files.write(Paths.get("primes.txt"), primes);
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }, executor).thenRun(executor::shutdown);
    }

    private static List<String> calculatePrimes(int max) {
        return IntStream.rangeClosed(2, max)
                .filter(PrimeCalculator::isPrime)
                .mapToObj(Integer::toString)
                .collect(Collectors.toList());
    }

    private static boolean isPrime(int number) {
        return IntStream.rangeClosed(2, (int) Math.sqrt(number))
                .allMatch(n -> number % n != 0);
    }
}

--------------------------------------------------------------------------------------------------------------------
7.Writing Thread-Safe Code, Immutable Objects

class Counter {
    private int count = 0;

    public synchronized void increment() {
        count++;
    }

    public synchronized void decrement() {
        count--;
    }

    public synchronized int getCount() {
        return count;
    }

    public static void main(String[] args) {
        Counter counter = new Counter();
        Runnable task = () -> {
            for (int i = 0; i < 1000; i++) {
                counter.increment();
                counter.decrement();
            }
        };

        Thread t1 = new Thread(task);
        Thread t2 = new Thread(task);
        t1.start();
        t2.start();
        try {
            t1.join();
            t2.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        System.out.println("Final count: " + counter.getCount());
    }
}

final class ImmutableData {
    private final int value;

    public ImmutableData(int value) {
        this.value = value;
    }

    public int getValue() {
        return value;
    }

    public static void main(String[] args) {
        ImmutableData data = new ImmutableData(42);
        Runnable task = () -> System.out.println("Value: " + data.getValue());

        Thread t1 = new Thread(task);
        Thread t2 = new Thread(task);
        t1.start();
        t2.start();
    }
}


