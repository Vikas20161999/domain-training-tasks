1.   
To implement a basic program in Java to check if a number is prime, you need to follow these steps:

Read an integer from the user.
Check if the number is less than or equal to 1. If it is, it is not a prime number.
Loop through numbers from 2 to the square root of the given number.
If any of these numbers divide the given number without a remainder, it is not a prime number.
If no such divisor is found, the number is prime.
Here's a simple implementation in Java:



import java.util.Scanner;

public class PrimeNumberCheck {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter a number: ");
        int number = scanner.nextInt();

        if (isPrime(number)) {
            System.out.println(number + " is a prime number.");
        } else {
            System.out.println(number + " is not a prime number.");
        }
    }

    public static boolean isPrime(int number) {
        if (number <= 1) {
            return false;
        }
        
        // Check from 2 to the square root of the number
        for (int i = 2; i <= Math.sqrt(number); i++) {
            if (number % i == 0) {
                return false; // Found a divisor, not a prime number
            }
        }
        return true; // No divisors found, it is a prime number
    }
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


2.  

To implement a basic program in Java to calculate the factorial of a number, you need to follow these steps:

Read an integer from the user.
Calculate the factorial using an iterative approach.
Print the result.
Here's a simple implementation in Java:

import java.util.Scanner;

public class FactorialCalculation {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter a non-negative integer: ");
        int number = scanner.nextInt();

        if (number < 0) {
            System.out.println("Factorial is not defined for negative numbers.");
        } else {
            long factorial = calculateFactorial(number);
            System.out.println("The factorial of " + number + " is " + factorial);
        }
    }

    public static long calculateFactorial(int number) {
        long result = 1;
        for (int i = 1; i <= number; i++) {
            result *= i;
        }
        return result;
    }
}


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

3.   Bubble Sort  

import java.util.Scanner;

public class BubbleSort {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the number of elements: ");
        int n = scanner.nextInt();

        int[] array = new int[n];

        System.out.println("Enter the elements of the array:");
        for (int i = 0; i < n; i++) {
            array[i] = scanner.nextInt();
        }

        bubbleSort(array);

        System.out.println("Sorted array:");
        for (int i = 0; i < n; i++) {
            System.out.print(array[i] + " ");
        }
    }

    public static void bubbleSort(int[] array) {
        int n = array.length;
        boolean swapped;
        
        for (int i = 0; i < n - 1; i++) {
            swapped = false;
            for (int j = 0; j < n - 1 - i; j++) {
                if (array[j] > array[j + 1]) {
                    // Swap array[j] and array[j + 1]
                    int temp = array[j];
                    array[j] = array[j + 1];
                    array[j + 1] = temp;
                    
                    swapped = true;
                }
            }
            // If no two elements were swapped in the inner loop, then the array is sorted
            if (!swapped) break;
        }
    }
}


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

4. To find the minimum number in an array in Java, you can implement a simple linear search. This involves iterating through the array and keeping track of the smallest element found.

Here's a basic implementation in Java:

import java.util.Scanner;

public class FindMinNumber {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the number of elements: ");
        int n = scanner.nextInt();

        int[] array = new int[n];

        System.out.println("Enter the elements of the array:");
        for (int i = 0; i < n; i++) {
            array[i] = scanner.nextInt();
        }

        int minNumber = findMin(array);

        System.out.println("The minimum number in the array is: " + minNumber);
    }

    public static int findMin(int[] array) {
        if (array.length == 0) {
            throw new IllegalArgumentException("Array must not be empty");
        }

        int min = array[0];
        for (int i = 1; i < array.length; i++) {
            if (array[i] < min) {
                min = array[i];
            }
        }
        return min;
    }
}


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

5. To find duplicate numbers in an array in Java, you can use a variety of methods. A straightforward approach is to use a HashSet to track elements you've already seen. As you iterate through the array, you can check if an element is already in the HashSet. If it is, it's a duplicate.

Here's a simple implementation in Java:

import java.util.HashSet;
import java.util.Scanner;
import java.util.Set;

public class FindDuplicates {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the number of elements: ");
        int n = scanner.nextInt();

        int[] array = new int[n];

        System.out.println("Enter the elements of the array:");
        for (int i = 0; i < n; i++) {
            array[i] = scanner.nextInt();
        }

        Set<Integer> duplicates = findDuplicates(array);

        if (duplicates.isEmpty()) {
            System.out.println("No duplicates found.");
        } else {
            System.out.println("Duplicate numbers in the array: " + duplicates);
        }
    }

    public static Set<Integer> findDuplicates(int[] array) {
        Set<Integer> seen = new HashSet<>();
        Set<Integer> duplicates = new HashSet<>();

        for (int num : array) {
            if (!seen.add(num)) {
                duplicates.add(num);
            }
        }

        return duplicates;
    }
}


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

6.above program in simple language :  

import java.util.HashSet;
import java.util.Scanner;
import java.util.Set;

public class FindDuplicates {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the number of elements: ");
        int n = scanner.nextInt();

        int[] array = new int[n];

        System.out.println("Enter the elements of the array:");
        for (int i = 0; i < n; i++) {
            array[i] = scanner.nextInt();
        }

        Set<Integer> duplicates = findDuplicates(array);

        if (duplicates.isEmpty()) {
            System.out.println("No duplicates found.");
        } else {
            System.out.println("Duplicate numbers in the array: " + duplicates);
        }
    }

    public static Set<Integer> findDuplicates(int[] array) {
        Set<Integer> seen = new HashSet<>();
        Set<Integer> duplicates = new HashSet<>();

        for (int num : array) {
            if (!seen.add(num)) {
                duplicates.add(num);
            }
        }

        return duplicates;
    }
}

