class ListNode {
    int val;
    ListNode next;

    ListNode(int val) {
        this.val = val;
        this.next = null;
    }
}

public class FindMiddleElement {
    public static ListNode findMiddle(ListNode head) {
        ListNode slowPtr = head;
        ListNode fastPtr = head;

        while (fastPtr != null && fastPtr.next != null) {
            slowPtr = slowPtr.next;
            fastPtr = fastPtr.next.next;
        }

        return slowPtr;
    }

    public static void main(String[] args) {
        // Example usage:
        ListNode head = new ListNode(1);
        head.next = new ListNode(2);
        head.next.next = new ListNode(3);
        head.next.next.next = new ListNode(4);
        head.next.next.next.next = new ListNode(5);

        ListNode middle = findMiddle(head);
        System.out.println("Middle element: " + middle.val);
    }
}

------------------------------------------------------------------------------------------------------------x-----------------------------------------------------------------------

import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;

public class QueueSorting {
    public static void sortQueue(Queue<Integer> queue) {
        Stack<Integer> stack = new Stack<>();

        // Step 1: Pop and Enqueue to Stack
        while (!queue.isEmpty()) {
            stack.push(queue.poll());
        }

        // Step 2: Sort the Stack (using any sorting algorithm)
        sortStack(stack);

        // Step 3: Pop and Enqueue to Queue
        while (!stack.isEmpty()) {
            queue.offer(stack.pop());
        }
    }

    // Sorting the stack using insertion sort
    private static void sortStack(Stack<Integer> stack) {
        Stack<Integer> tempStack = new Stack<>();

        while (!stack.isEmpty()) {
            int temp = stack.pop();
            while (!tempStack.isEmpty() && tempStack.peek() > temp) {
                stack.push(tempStack.pop());
            }
            tempStack.push(temp);
        }

        while (!tempStack.isEmpty()) {
            stack.push(tempStack.pop());
        }
    }

    public static void main(String[] args) {
        Queue<Integer> queue = new LinkedList<>();
        queue.offer(5);
        queue.offer(3);
        queue.offer(8);
        queue.offer(1);
        queue.offer(6);

        System.out.println("Before sorting: " + queue);

        sortQueue(queue);

        System.out.println("After sorting: " + queue);
    }
}

