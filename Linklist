class ListNode {
    int val;
    ListNode next;

    ListNode(int val) {
        this.val = val;
        this.next = null;
    }
}

public class FindMiddleElement {
    public static ListNode findMiddle(ListNode head) {
        ListNode slowPtr = head;
        ListNode fastPtr = head;

        while (fastPtr != null && fastPtr.next != null) {
            slowPtr = slowPtr.next;
            fastPtr = fastPtr.next.next;
        }

        return slowPtr;
    }

    public static void main(String[] args) {
        // Example usage:
        ListNode head = new ListNode(1);
        head.next = new ListNode(2);
        head.next.next = new ListNode(3);
        head.next.next.next = new ListNode(4);
        head.next.next.next.next = new ListNode(5);

        ListNode middle = findMiddle(head);
        System.out.println("Middle element: " + middle.val);
    }
}

------------------------------------------------------------------------------------------------------------x-----------------------------------------------------------------------

import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;

public class QueueSorting {
    public static void sortQueue(Queue<Integer> queue) {
        Stack<Integer> stack = new Stack<>();

        // Step 1: Pop and Enqueue to Stack
        while (!queue.isEmpty()) {
            stack.push(queue.poll());
        }

        // Step 2: Sort the Stack (using any sorting algorithm)
        sortStack(stack);

        // Step 3: Pop and Enqueue to Queue
        while (!stack.isEmpty()) {
            queue.offer(stack.pop());
        }
    }

    // Sorting the stack using insertion sort
    private static void sortStack(Stack<Integer> stack) {
        Stack<Integer> tempStack = new Stack<>();

        while (!stack.isEmpty()) {
            int temp = stack.pop();
            while (!tempStack.isEmpty() && tempStack.peek() > temp) {
                stack.push(tempStack.pop());
            }
            tempStack.push(temp);
        }

        while (!tempStack.isEmpty()) {
            stack.push(tempStack.pop());
        }
    }

    public static void main(String[] args) {
        Queue<Integer> queue = new LinkedList<>();
        queue.offer(5);
        queue.offer(3);
        queue.offer(8);
        queue.offer(1);
        queue.offer(6);

        System.out.println("Before sorting: " + queue);

        sortQueue(queue);

        System.out.println("After sorting: " + queue);
    }
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

import java.util.Stack;

public class StackSorting {
    public static void sortStack(Stack<Integer> stack) {
        Stack<Integer> tempStack = new Stack<>();

        while (!stack.isEmpty()) {
            // Pop the top element from the original stack
            int temp = stack.pop();

            // Move elements from temporary stack to original stack until tempStack is empty or top of tempStack is smaller than temp
            while (!tempStack.isEmpty() && tempStack.peek() > temp) {
                stack.push(tempStack.pop());
            }

            // Push temp onto tempStack
            tempStack.push(temp);
        }

        // Copy sorted elements from tempStack back to original stack
        while (!tempStack.isEmpty()) {
            stack.push(tempStack.pop());
        }
    }

    public static void main(String[] args) {
        Stack<Integer> stack = new Stack<>();
        stack.push(5);
        stack.push(3);
        stack.push(8);
        stack.push(1);
        stack.push(6);

        System.out.println("Before sorting: " + stack);

        sortStack(stack);

        System.out.println("After sorting: " + stack);
    }
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

5.
class ListNode {
    int val;
    ListNode next;

    ListNode(int val) {
        this.val = val;
        this.next = null;
    }
}

public class RemoveDuplicatesFromSortedList {
    public static ListNode removeDuplicates(ListNode head) {
        ListNode current = head;

        while (current != null && current.next != null) {
            if (current.val == current.next.val) {
                current.next = current.next.next; // Skip the duplicate node
            } else {
                current = current.next; // Move to the next node
            }
        }

        return head;
    }

    // Utility method to print the linked list
    public static void printList(ListNode head) {
        ListNode current = head;
        while (current != null) {
            System.out.print(current.val + " ");
            current = current.next;
        }
        System.out.println();
    }

    public static void main(String[] args) {
        ListNode head = new ListNode(1);
        head.next = new ListNode(1);
        head.next.next = new ListNode(2);
        head.next.next.next = new ListNode(3);
        head.next.next.next.next = new ListNode(3);

        System.out.println("Original List:");
        printList(head);

        ListNode result = removeDuplicates(head);

        System.out.println("List after removing duplicates:");
        printList(result);
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
6.import java.util.Stack;

public class SequenceInStack {
    public static boolean isSequencePresent(Stack<Integer> stack, int[] sequence) {
        if (sequence.length == 0) {
            return true; // Empty sequence is always present
        }

        Stack<Integer> tempStack = new Stack<>();

        // Iterate through the stack and compare elements with the sequence
        while (!stack.isEmpty()) {
            int currentStackElement = stack.pop();

            if (currentStackElement == sequence[sequence.length - 1]) {
                tempStack.push(currentStackElement);
                // Check if the sequence is present
                if (checkSequence(tempStack, sequence)) {
                    return true;
                }
            } else {
                tempStack.push(currentStackElement);
            }
        }

        return false; // Sequence not found
    }

    private static boolean checkSequence(Stack<Integer> stack, int[] sequence) {
        if (stack.size() < sequence.length) {
            return false;
        }

        int sequenceIndex = sequence.length - 1;

        // Check if elements in the stack match the sequence
        while (!stack.isEmpty() && sequenceIndex >= 0) {
            int currentStackElement = stack.pop();

            if (currentStackElement != sequence[sequenceIndex]) {
                return false; // Sequence not present
            }

            sequenceIndex--;
        }

        return sequenceIndex == -1; // Sequence found
    }

    public static void main(String[] args) {
        Stack<Integer> stack = new Stack<>();
        stack.push(3);
        stack.push(2);
        stack.push(1);
        stack.push(5);
        stack.push(4);

        int[] sequence1 = {1, 2, 3};
        int[] sequence2 = {4, 5};

        System.out.println("Sequence 1 present in stack: " + isSequencePresent(stack, sequence1));
        System.out.println("Sequence 2 present in stack: " + isSequencePresent(stack, sequence2));
    }
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

7.

class ListNode {
    int val;
    ListNode next;

    ListNode(int val) {
        this.val = val;
        this.next = null;
    }
}

public class MergeSortedLinkedLists {
    public static ListNode mergeLists(ListNode l1, ListNode l2) {
        ListNode dummy = new ListNode(0);
        ListNode tail = dummy;

        while (l1 != null && l2 != null) {
            if (l1.val <= l2.val) {
                tail.next = l1;
                l1 = l1.next;
            } else {
                tail.next = l2;
                l2 = l2.next;
            }
            tail = tail.next;
        }

        // Attach remaining nodes from l1 or l2
        if (l1 != null) {
            tail.next = l1;
        } else {
            tail.next = l2;
        }

        // Return the merged list (excluding the dummy node)
        return dummy.next;
    }

    // Utility method to print the linked list
    public static void printList(ListNode head) {
        ListNode current = head;
        while (current != null) {
            System.out.print(current.val + " ");
            current = current.next;
        }
        System.out.println();
    }

    public static void main(String[] args) {
        // Example usage:
        ListNode l1 = new ListNode(1);
        l1.next = new ListNode(3);
        l1.next.next = new ListNode(5);

        ListNode l2 = new ListNode(2);
        l2.next = new ListNode(4);
        l2.next.next = new ListNode(6);

        System.out.println("List 1:");
        printList(l1);

        System.out.println("List 2:");
        printList(l2);

        ListNode mergedList = mergeLists(l1, l2);
        System.out.println("Merged List:");
        printList(mergedList);
    }
}

---------------------------------------------------------------------------------------------------------------------------------------------------

8.

public class CircularQueueBinarySearch {

    public static int search(int[] nums, int target) {
        int left = 0;
        int right = nums.length - 1;

        while (left <= right) {
            int mid = left + (right - left) / 2;

            if (nums[mid] == target) {
                return mid;
            }

            if (nums[left] <= nums[mid]) { // Left half is sorted
                if (nums[left] <= target && target < nums[mid]) {
                    right = mid - 1;
                } else {
                    left = mid + 1;
                }
            } else { // Right half is sorted
                if (nums[mid] < target && target <= nums[right]) {
                    left = mid + 1;
                } else {
                    right = mid - 1;
                }
            }
        }

        return -1; // Element not found
    }

    public static void main(String[] args) {
        int[] nums = {4, 5, 6, 7, 0, 1, 2};
        int target = 0;

        int index = search(nums, target);
        if (index != -1) {
            System.out.println("Element " + target + " found at index " + index);
        } else {
            System.out.println("Element " + target + " not found");
        }
    }
}

