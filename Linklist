class ListNode {
    int val;
    ListNode next;

    ListNode(int val) {
        this.val = val;
        this.next = null;
    }
}

public class FindMiddleElement {
    public static ListNode findMiddle(ListNode head) {
        ListNode slowPtr = head;
        ListNode fastPtr = head;

        while (fastPtr != null && fastPtr.next != null) {
            slowPtr = slowPtr.next;
            fastPtr = fastPtr.next.next;
        }

        return slowPtr;
    }

    public static void main(String[] args) {
        // Example usage:
        ListNode head = new ListNode(1);
        head.next = new ListNode(2);
        head.next.next = new ListNode(3);
        head.next.next.next = new ListNode(4);
        head.next.next.next.next = new ListNode(5);

        ListNode middle = findMiddle(head);
        System.out.println("Middle element: " + middle.val);
    }
}

------------------------------------------------------------------------------------------------------------x-----------------------------------------------------------------------

import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;

public class QueueSorting {
    public static void sortQueue(Queue<Integer> queue) {
        Stack<Integer> stack = new Stack<>();

        // Step 1: Pop and Enqueue to Stack
        while (!queue.isEmpty()) {
            stack.push(queue.poll());
        }

        // Step 2: Sort the Stack (using any sorting algorithm)
        sortStack(stack);

        // Step 3: Pop and Enqueue to Queue
        while (!stack.isEmpty()) {
            queue.offer(stack.pop());
        }
    }

    // Sorting the stack using insertion sort
    private static void sortStack(Stack<Integer> stack) {
        Stack<Integer> tempStack = new Stack<>();

        while (!stack.isEmpty()) {
            int temp = stack.pop();
            while (!tempStack.isEmpty() && tempStack.peek() > temp) {
                stack.push(tempStack.pop());
            }
            tempStack.push(temp);
        }

        while (!tempStack.isEmpty()) {
            stack.push(tempStack.pop());
        }
    }

    public static void main(String[] args) {
        Queue<Integer> queue = new LinkedList<>();
        queue.offer(5);
        queue.offer(3);
        queue.offer(8);
        queue.offer(1);
        queue.offer(6);

        System.out.println("Before sorting: " + queue);

        sortQueue(queue);

        System.out.println("After sorting: " + queue);
    }
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

import java.util.Stack;

public class StackSorting {
    public static void sortStack(Stack<Integer> stack) {
        Stack<Integer> tempStack = new Stack<>();

        while (!stack.isEmpty()) {
            // Pop the top element from the original stack
            int temp = stack.pop();

            // Move elements from temporary stack to original stack until tempStack is empty or top of tempStack is smaller than temp
            while (!tempStack.isEmpty() && tempStack.peek() > temp) {
                stack.push(tempStack.pop());
            }

            // Push temp onto tempStack
            tempStack.push(temp);
        }

        // Copy sorted elements from tempStack back to original stack
        while (!tempStack.isEmpty()) {
            stack.push(tempStack.pop());
        }
    }

    public static void main(String[] args) {
        Stack<Integer> stack = new Stack<>();
        stack.push(5);
        stack.push(3);
        stack.push(8);
        stack.push(1);
        stack.push(6);

        System.out.println("Before sorting: " + stack);

        sortStack(stack);

        System.out.println("After sorting: " + stack);
    }
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

5.
class ListNode {
    int val;
    ListNode next;

    ListNode(int val) {
        this.val = val;
        this.next = null;
    }
}

public class RemoveDuplicatesFromSortedList {
    public static ListNode removeDuplicates(ListNode head) {
        ListNode current = head;

        while (current != null && current.next != null) {
            if (current.val == current.next.val) {
                current.next = current.next.next; // Skip the duplicate node
            } else {
                current = current.next; // Move to the next node
            }
        }

        return head;
    }

    // Utility method to print the linked list
    public static void printList(ListNode head) {
        ListNode current = head;
        while (current != null) {
            System.out.print(current.val + " ");
            current = current.next;
        }
        System.out.println();
    }

    public static void main(String[] args) {
        ListNode head = new ListNode(1);
        head.next = new ListNode(1);
        head.next.next = new ListNode(2);
        head.next.next.next = new ListNode(3);
        head.next.next.next.next = new ListNode(3);

        System.out.println("Original List:");
        printList(head);

        ListNode result = removeDuplicates(head);

        System.out.println("List after removing duplicates:");
        printList(result);
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
6.import java.util.Stack;

public class SequenceInStack {
    public static boolean isSequencePresent(Stack<Integer> stack, int[] sequence) {
        if (sequence.length == 0) {
            return true; // Empty sequence is always present
        }

        Stack<Integer> tempStack = new Stack<>();

        // Iterate through the stack and compare elements with the sequence
        while (!stack.isEmpty()) {
            int currentStackElement = stack.pop();

            if (currentStackElement == sequence[sequence.length - 1]) {
                tempStack.push(currentStackElement);
                // Check if the sequence is present
                if (checkSequence(tempStack, sequence)) {
                    return true;
                }
            } else {
                tempStack.push(currentStackElement);
            }
        }

        return false; // Sequence not found
    }

    private static boolean checkSequence(Stack<Integer> stack, int[] sequence) {
        if (stack.size() < sequence.length) {
            return false;
        }

        int sequenceIndex = sequence.length - 1;

        // Check if elements in the stack match the sequence
        while (!stack.isEmpty() && sequenceIndex >= 0) {
            int currentStackElement = stack.pop();

            if (currentStackElement != sequence[sequenceIndex]) {
                return false; // Sequence not present
            }

            sequenceIndex--;
        }

        return sequenceIndex == -1; // Sequence found
    }

    public static void main(String[] args) {
        Stack<Integer> stack = new Stack<>();
        stack.push(3);
        stack.push(2);
        stack.push(1);
        stack.push(5);
        stack.push(4);

        int[] sequence1 = {1, 2, 3};
        int[] sequence2 = {4, 5};

        System.out.println("Sequence 1 present in stack: " + isSequencePresent(stack, sequence1));
        System.out.println("Sequence 2 present in stack: " + isSequencePresent(stack, sequence2));
    }
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

7.

class ListNode {
    int val;
    ListNode next;

    ListNode(int val) {
        this.val = val;
        this.next = null;
    }
}

public class MergeSortedLinkedLists {
    public static ListNode mergeLists(ListNode l1, ListNode l2) {
        ListNode dummy = new ListNode(0);
        ListNode tail = dummy;

        while (l1 != null && l2 != null) {
            if (l1.val <= l2.val) {
                tail.next = l1;
                l1 = l1.next;
            } else {
                tail.next = l2;
                l2 = l2.next;
            }
            tail = tail.next;
        }

        // Attach remaining nodes from l1 or l2
        if (l1 != null) {
            tail.next = l1;
        } else {
            tail.next = l2;
        }

        // Return the merged list (excluding the dummy node)
        return dummy.next;
    }

    // Utility method to print the linked list
    public static void printList(ListNode head) {
        ListNode current = head;
        while (current != null) {
            System.out.print(current.val + " ");
            current = current.next;
        }
        System.out.println();
    }

    public static void main(String[] args) {
        // Example usage:
        ListNode l1 = new ListNode(1);
        l1.next = new ListNode(3);
        l1.next.next = new ListNode(5);

        ListNode l2 = new ListNode(2);
        l2.next = new ListNode(4);
        l2.next.next = new ListNode(6);

        System.out.println("List 1:");
        printList(l1);

        System.out.println("List 2:");
        printList(l2);

        ListNode mergedList = mergeLists(l1, l2);
        System.out.println("Merged List:");
        printList(mergedList);
    }
}

---------------------------------------------------------------------------------------------------------------------------------------------------

8.

public class CircularQueueBinarySearch {

    public static int search(int[] nums, int target) {
        int left = 0;
        int right = nums.length - 1;

        while (left <= right) {
            int mid = left + (right - left) / 2;

            if (nums[mid] == target) {
                return mid;
            }

            if (nums[left] <= nums[mid]) { // Left half is sorted
                if (nums[left] <= target && target < nums[mid]) {
                    right = mid - 1;
                } else {
                    left = mid + 1;
                }
            } else { // Right half is sorted
                if (nums[mid] < target && target <= nums[right]) {
                    left = mid + 1;
                } else {
                    right = mid - 1;
                }
            }
        }

        return -1; // Element not found
    }

    public static void main(String[] args) {
        int[] nums = {4, 5, 6, 7, 0, 1, 2};
        int target = 0;

        int index = search(nums, target);
        if (index != -1) {
            System.out.println("Element " + target + " found at index " + index);
        } else {
            System.out.println("Element " + target + " not found");
        }
    }
}

---------------------------------------------------------------------------------------------------------------------------------

Task 1: Balanced Binary Tree Check


Write a function to check if a given binary tree is balanced. A balanced tree is one where the height of two subtrees of any node never differs by more than one.

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    TreeNode(int val) {
        this.val = val;
        this.left = null;
        this.right = null;
    }
}

public class BinaryTree {
    
    public boolean isBalanced(TreeNode root) {
        return checkHeight(root) != -1;
    }
    
    private int checkHeight(TreeNode node) {
        if (node == null) {
            return 0;
        }
        
        int leftHeight = checkHeight(node.left);
        if (leftHeight == -1) {
            return -1;
        }
        
        int rightHeight = checkHeight(node.right);
        if (rightHeight == -1) {
            return -1;
        }
        
        if (Math.abs(leftHeight - rightHeight) > 1) {
            return -1;
        }
        
        return Math.max(leftHeight, rightHeight) + 1;
    }

    public static void main(String[] args) {
        // Example usage:
        // Constructing a balanced binary tree
        //        1
        //       / \
        //      2   3
        //     / \
        //    4   5

        TreeNode root = new TreeNode(1);
        root.left = new TreeNode(2);
        root.right = new TreeNode(3);
        root.left.left = new TreeNode(4);
        root.left.right = new TreeNode(5);

        BinaryTree treeChecker = new BinaryTree();
        System.out.println(treeChecker.isBalanced(root));  // Output: true

        // Constructing an unbalanced binary tree
        //        1
        //       /
        //      2
        //     /
        //    3
        //   /
        //  4
        TreeNode unbalancedRoot = new TreeNode(1);
        unbalancedRoot.left = new TreeNode(2);
        unbalancedRoot.left.left = new TreeNode(3);
        unbalancedRoot.left.left.left = new TreeNode(4);

        System.out.println(treeChecker.isBalanced(unbalancedRoot));  // Output: false
    }
}


 
Task 2: Trie for Prefix Checking


Implement a trie data structure in C# that supports insertion of strings and provides a method to check if a given string is a prefix of any word in the trie.

class TrieNode {
    private TrieNode[] children;
    private boolean isEndOfWord;

    public TrieNode() {
        children = new TrieNode[26]; // Assuming only lowercase English letters
        isEndOfWord = false;
    }

    public boolean containsKey(char ch) {
        return children[ch - 'a'] != null;
    }

    public TrieNode get(char ch) {
        return children[ch - 'a'];
    }

    public void put(char ch, TrieNode node) {
        children[ch - 'a'] = node;
    }

    public void setEndOfWord() {
        isEndOfWord = true;
    }

    public boolean isEndOfWord() {
        return isEndOfWord;
    }
}

public class Trie {
    private TrieNode root;

    public Trie() {
        root = new TrieNode();
    }

    public void insert(String word) {
        TrieNode node = root;
        for (char ch : word.toCharArray()) {
            if (!node.containsKey(ch)) {
                node.put(ch, new TrieNode());
            }
            node = node.get(ch);
        }
        node.setEndOfWord();
    }

    public boolean isPrefix(String prefix) {
        TrieNode node = root;
        for (char ch : prefix.toCharArray()) {
            if (node.containsKey(ch)) {
                node = node.get(ch);
            } else {
                return false;
            }
        }
        return true;
    }

    public static void main(String[] args) {
        Trie trie = new Trie();
        
        // Insert words into the trie
        trie.insert("apple");
        trie.insert("app");
        trie.insert("apricot");
        trie.insert("banana");

        // Check prefixes
        System.out.println(trie.isPrefix("app")); // Output: true
        System.out.println(trie.isPrefix("apr")); // Output: true
        System.out.println(trie.isPrefix("ban")); // Output: true
        System.out.println(trie.isPrefix("bat")); // Output: false
    }
}


 
Task 3: Implementing Heap Operations


Code a min-heap in java with methods for insertion, deletion, and fetching the minimum element. Ensure that the heap property is maintained after each operation."

import java.util.ArrayList;
import java.util.List;

public class MinHeap {
    private List<Integer> heap;

    public MinHeap() {
        heap = new ArrayList<>();
    }

    public void insert(int value) {
        heap.add(value);
        int currentIndex = heap.size() - 1;
        while (currentIndex > 0) {
            int parentIndex = (currentIndex - 1) / 2;
            if (heap.get(currentIndex) < heap.get(parentIndex)) {
                swap(currentIndex, parentIndex);
                currentIndex = parentIndex;
            } else {
                break;
            }
        }
    }

    public int deleteMin() {
        if (heap.isEmpty()) {
            throw new IllegalStateException("Heap is empty");
        }
        int minValue = heap.get(0);
        heap.set(0, heap.get(heap.size() - 1));
        heap.remove(heap.size() - 1);
        heapifyDown(0);
        return minValue;
    }

    public int getMin() {
        if (heap.isEmpty()) {
            throw new IllegalStateException("Heap is empty");
        }
        return heap.get(0);
    }

    private void heapifyDown(int index) {
        int leftChild = 2 * index + 1;
        int rightChild = 2 * index + 2;
        int smallest = index;

        if (leftChild < heap.size() && heap.get(leftChild) < heap.get(smallest)) {
            smallest = leftChild;
        }

        if (rightChild < heap.size() && heap.get(rightChild) < heap.get(smallest)) {
            smallest = rightChild;
        }

        if (smallest != index) {
            swap(index, smallest);
            heapifyDown(smallest);
        }
    }

    private void swap(int i, int j) {
        int temp = heap.get(i);
        heap.set(i, heap.get(j));
        heap.set(j, temp);
    }

    public static void main(String[] args) {
        MinHeap minHeap = new MinHeap();
        minHeap.insert(5);
        minHeap.insert(3);
        minHeap.insert(8);
        minHeap.insert(1);
        minHeap.insert(10);

        System.out.println("Min element: " + minHeap.getMin());

        minHeap.deleteMin();
        System.out.println("Min element after deletion: " + minHeap.getMin());
    }
}

 
Task 4: Graph Edge Addition Validation


Given a directed graph, write a function that adds an edge between two nodes and then checks if the graph still has no cycles. If a cycle is created, the edge should not be added.


import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class DirectedGraph {
    private int V; // Number of vertices
    private List<List<Integer>> adjList; // Adjacency list representation of the graph

    public DirectedGraph(int V) {
        this.V = V;
        adjList = new ArrayList<>(V);
        for (int i = 0; i < V; i++) {
            adjList.add(new ArrayList<>());
        }
    }

    public void addEdge(int u, int v) {
        adjList.get(u).add(v);
    }

    public boolean hasCycleAfterAddingEdge(int u, int v) {
        addEdge(u, v); // Add the new edge

        Set<Integer> visited = new HashSet<>();
        Set<Integer> recursionStack = new HashSet<>();

        for (int i = 0; i < V; i++) {
            if (hasCycleUtil(i, visited, recursionStack)) {
                return true;
            }
        }

        return false;
    }

    private boolean hasCycleUtil(int vertex, Set<Integer> visited, Set<Integer> recursionStack) {
        if (recursionStack.contains(vertex)) {
            return true; // Cycle detected
        }

        if (visited.contains(vertex)) {
            return false; // Already visited, no cycle
        }

        visited.add(vertex);
        recursionStack.add(vertex);

        for (int neighbor : adjList.get(vertex)) {
            if (hasCycleUtil(neighbor, visited, recursionStack)) {
                return true;
            }
        }

        recursionStack.remove(vertex); // Backtrack
        return false;
    }

    public static void main(String[] args) {
        DirectedGraph graph = new DirectedGraph(4);
        graph.addEdge(0, 1);
        graph.addEdge(1, 2);
        graph.addEdge(2, 3);
        System.out.println("Graph has cycle before adding edge: " + graph.hasCycleAfterAddingEdge(3, 0));
        System.out.println("Graph has cycle after adding edge: " + graph.hasCycleAfterAddingEdge(3, 0));
    }
}

